// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package hw4;

import "google/protobuf/timestamp.proto";

// The service definition for the master process
service MessengerMaster {
    
    // Initalize worker on the worker database
    rpc WorkerConnected (WorkerAddress) returns (Reply) {}
    
    // Returns the primary worker - the worker with least clients connected
    rpc FindPrimaryWorker (Request) returns (AssignedWorkers) {}
    
    // managing database on the master
    rpc LoginMaster (Request) returns (Reply) {}
    
    // joins a user on the master database
    rpc JoinMaster (Request) returns (Reply) {}
    
    // leaves a user on the master database
    rpc LeaveMaster (Request) returns (Reply) {}
}

// The service definition for the worker processes
service MessengerWorker {
    rpc Login (Request) returns (Reply) {}
    rpc List (Request) returns (ListReply) {}
    rpc Join (Request) returns (Reply) {}
    rpc Leave (Request) returns (Reply) {}
    
    // Client connects to the worker, re-routes to their dedicated worker
    rpc Connect (Request) returns (AssignedWorkers) {}
    
    // Client sends chats to worker
    rpc Chat (stream Message) returns (stream Message) {}
    
    // Chat communication between workers for file management cross server
    rpc Worker (stream Message) returns (stream Message) {}
    
    // "Heartbeat" - make sure all workers are active
    rpc CheckWorker (Request) returns (Reply) {}
    
    // If the master dies, master replica sends address to the worker
    rpc UpdateMasterAddress (Request) returns (Reply) {}
    
    // Returns the number of clients connected to the worker
    rpc NumberClientsConnected (Request) returns (Reply) {}
}

message ListReply {
    repeated string all_rooms = 1;
    repeated string joined_rooms = 2;
}

message Request {
    string username = 1;
    repeated string arguments = 2;
}

message Reply {
    string msg = 1;
}

message WorkerAddress {
    string host = 1;
    string port = 2;
}

message AssignedWorkers {
    string primary = 1;
    string secondary1 = 2;
    string secondary2 = 3;
}

message Message {

  //Username who sent the message
  string username = 1;
  
  //Message from the user
  string msg = 2;
  
  //Time the message was sent
  google.protobuf.Timestamp timestamp = 3;
  
  //Primary Worker
  string primary = 4;
  
  //Secondary Worker 1
  string secondary1 = 5;
  
  //Secondary Worker 2
  string secondary2 = 6;
}
